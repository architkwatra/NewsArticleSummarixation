# -*- coding: utf-8 -*-
"""K-Means.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10qlnT0Ijhpn-qCMAT_druH1B8rSkgIB0
"""

from google.colab import drive
drive.mount('/content/drive')
!ls
!pwd
!cd /content/drive
print('done')

pip install rouge

import pandas as pd
import matplotlib.pyplot as plt   
import numpy as np
from rouge import Rouge
from sklearn.cluster import KMeans
import random

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x

import tensorflow as tf
import tensorflow_hub as hub

print(tf.__version__)

embed = hub.load("https://tfhub.dev/google/universal-sentence-encoder/3")

extractiveRecords = pd.read_csv('/content/drive/My Drive/CSC522-ALDA/RK_ALDA_PROJ/Final Submission/K-Means/extractive.csv')

extractiveRecords.shape

def generateEmbedding(x):
  sentences=x.split('\n')
  sentences = list(filter(None, sentences))
  master_sentences=[]
  for sentence in sentences:
    innersentences = sentence.split(". ")
    innersentences = list(filter(None, innersentences))
    master_sentences += innersentences
  embedding = embed(master_sentences)["outputs"]
  return (master_sentences, embedding)

def calculateNumSentences(sentences, threshold, num_centers, sentence_embeddings):
  num_sentences = ((len(sentences))*threshold)/num_centers
  numpy_embed = sentence_embeddings.numpy()
  # print( numpy_embed)
  centres = []
  centres.append(list(numpy_embed[0]))
  centres.append(list(numpy_embed[-1]))
  r1 = random.randrange(1, len(numpy_embed)-2)
  r2=0
  while (True):
    r2= random.randrange(1, len(numpy_embed)-2)
    if(r2!=r1):
      break
  centres.append(list(numpy_embed[r1]))
  centres.append(list(numpy_embed[r2]))
  return num_sentences, np.array(centres)

gen_summaries=[]
for i in range(0,100000):
  print(i)
  sentences, embeddings = generateEmbedding(extractiveRecords['text'].iloc[i])
  summary = ""
  if len(embeddings) > 4:
    num_centers=4
    threshold = 0.4
    num_sentences, centres=calculateNumSentences(sentences, threshold, num_centers, embeddings)
    kmeans = KMeans(n_clusters=num_centers,random_state=0,init=centres).fit(embeddings)
    res=[]
    for c in range(0, num_centers):
      d = kmeans.transform(embeddings)[:, c]
      ind = np.argsort(d)[::-1][:int(num_sentences)]
      for i in range(len(ind)):
        res.append(ind[i])
    for i in sorted(set(res)):
      summary = summary+sentences[i]+" "
  else:
    for i in range(len(sentences)):
      summary = summary+sentences[i]+" "
  if (len(summary) == 0):
    for i in range(len(sentences)):
      summary = summary+sentences[i]+" "
  gen_summaries.append(summary)

rouge = Rouge()
res_scores1=[]
res_scores2=[]
res_scoresL=[]
for i in  range(0,100000):
  if(len(gen_summaries[i])<6000 and len(extractiveRecords['summary'].iloc[i])<6000):
    scores = rouge.get_scores(gen_summaries[i], extractiveRecords['summary'].iloc[i])
    scores_1=scores[0]
    svalues_1 = list(scores_1.values())
    svalues_1 = svalues_1[0]
    res_scores1.append([svalues_1['f'], svalues_1['p'], svalues_1['r']])

    scores_2=scores[0]
    svalues_2 = list(scores_2.values())
    svalues_2 = svalues_2[1]
    # print(svalues)
    res_scores2.append([svalues_2['f'], svalues_2['p'], svalues_2['r']])

    scores_l=scores[0]
    svalues_l = list(scores_l.values())
    svalues_l = svalues_l[2]
    # print(svalues)
    res_scoresL.append([svalues_l['f'], svalues_l['p'], svalues_l['r']])

gen_summaries[50]

extractiveRecords['text'].iloc[50]

print("\n **************** ROGUE 1 ********************** \n")

plt.title("Rogue")
# plt.plot([pt[0] for pt in res_scores],label = 'F-Score')
plot_vals = [pt[0] for pt in res_scores1]
print(np.mean(plot_vals))
plt.scatter(range(0, len(res_scores1)), plot_vals,label = 'F-Score')
plt.legend()
plt.show()

plt.title("Rogue")
# plt.plot([pt[1] for pt in res_scores],label = 'Precission')
plot_vals = [pt[1] for pt in res_scores1]
print(np.mean(plot_vals))
plt.scatter(range(0, len(res_scores1)), plot_vals,label = 'Precission')
plt.legend()
plt.show()

plt.title("Rogue")
plot_vals = [pt[2] for pt in res_scores1]

print(np.mean(plot_vals))
plt.scatter(range(0, len(res_scores1)), plot_vals,label = 'Recall')
plt.legend()
plt.show()


print("\n **************** ROGUE 2 ********************** \n")

plt.title("Rogue")
# plt.plot([pt[0] for pt in res_scores],label = 'F-Score')
plot_vals = [pt[0] for pt in res_scores2]
print(np.mean(plot_vals))
plt.scatter(range(0, len(res_scores2)), plot_vals,label = 'F-Score')
plt.legend()
plt.show()

plt.title("Rogue")
# plt.plot([pt[1] for pt in res_scores],label = 'Precission')
plot_vals = [pt[1] for pt in res_scores2]
print(np.mean(plot_vals))
plt.scatter(range(0, len(res_scores2)), plot_vals,label = 'Precission')
plt.legend()
plt.show()

plt.title("Rogue")
plot_vals = [pt[2] for pt in res_scores2]

print(np.mean(plot_vals))
plt.scatter(range(0, len(res_scores2)), plot_vals,label = 'Recall')
plt.legend()
plt.show()


print("\n **************** ROGUE L ********************** \n")

plt.title("Rogue")
# plt.plot([pt[0] for pt in res_scores],label = 'F-Score')
plot_vals = [pt[0] for pt in res_scoresL]
print(np.mean(plot_vals))
plt.scatter(range(0, len(res_scoresL)), plot_vals,label = 'F-Score')
plt.legend()
plt.show()

plt.title("Rogue")
# plt.plot([pt[1] for pt in res_scores],label = 'Precission')
plot_vals = [pt[1] for pt in res_scoresL]
print(np.mean(plot_vals))
plt.scatter(range(0, len(res_scoresL)), plot_vals,label = 'Precission')
plt.legend()
plt.show()

plt.title("Rogue")
plot_vals = [pt[2] for pt in res_scoresL]

print(np.mean(plot_vals))
plt.scatter(range(0, len(res_scoresL)), plot_vals,label = 'Recall')
plt.legend()
plt.show()